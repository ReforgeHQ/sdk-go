# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on: [push]

jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.23.x', '1.24.x', '1.25.x']

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...
      env:
        REFORGE_INTEGRATION_TEST_SDK_KEY: ${{ secrets.REFORGE_INTEGRATION_TEST_SDK_KEY }}
        REFORGE_INTEGRATION_TEST_ENCRYPTION_KEY: "c87ba22d8662282abe8a0e4651327b579cb64a454ab0f4c170b45b15f049a221"
        NOT_A_NUMBER: "not a number"
        IS_A_NUMBER: 1234

  auto-tag:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4
      with:
        # Fetch full history to detect version changes
        fetch-depth: 0

    - name: Check if version changed
      id: version-check
      run: |
        # Get the current version from version.go
        CURRENT_VERSION=$(grep 'const Version = ' internal/version.go | sed 's/const Version = "\(.*\)"/\1/')
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

        # Check if version.go was changed in this push
        if git diff --name-only HEAD~1 HEAD | grep -q "internal/version.go"; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "Version changed to: $CURRENT_VERSION"
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
          echo "Version unchanged: $CURRENT_VERSION"
        fi

    - name: Check if tag already exists
      id: tag-check
      if: steps.version-check.outputs.version_changed == 'true'
      run: |
        TAG_NAME="v${{ steps.version-check.outputs.current_version }}"
        if git tag -l | grep -q "^$TAG_NAME$"; then
          echo "tag_exists=true" >> $GITHUB_OUTPUT
          echo "Tag $TAG_NAME already exists"
        else
          echo "tag_exists=false" >> $GITHUB_OUTPUT
          echo "Tag $TAG_NAME does not exist, will create"
        fi
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

    - name: Create and push tag
      if: steps.version-check.outputs.version_changed == 'true' && steps.tag-check.outputs.tag_exists == 'false'
      run: |
        TAG_NAME="${{ steps.tag-check.outputs.tag_name }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git tag -a "$TAG_NAME" -m "Release $TAG_NAME

        ðŸ¤– Auto-tagged by GitHub Actions

        Co-Authored-By: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

        git push origin "$TAG_NAME"

        echo "âœ… Created and pushed tag: $TAG_NAME"
        echo "Users can now use: go get github.com/ReforgeHQ/sdk-go@$TAG_NAME"

    - name: Create GitHub Release
      if: steps.version-check.outputs.version_changed == 'true' && steps.tag-check.outputs.tag_exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag-check.outputs.tag_name }}
        release_name: Release ${{ steps.tag-check.outputs.tag_name }}
        body: |
          ## Release ${{ steps.tag-check.outputs.tag_name }}

          ### Installation
          ```bash
          go get github.com/ReforgeHQ/sdk-go@${{ steps.tag-check.outputs.tag_name }}
          ```

          ### Import
          ```go
          import reforge "github.com/ReforgeHQ/sdk-go"
          ```

          ðŸ¤– Auto-generated release
        draft: false
        prerelease: false
